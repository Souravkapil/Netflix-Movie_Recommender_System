# -*- coding: utf-8 -*-
"""Netflix : Movie-Recommender-System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j3YoJwyQVu3_67AMLuba-IGvi5DvpwZ4

# Movie Recommender System - Content Based Filtering

# Import Python Libraries
"""

import numpy as np
import pandas as pd

"""# Upload datasets"""

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

credits.head()

"""# Analyzing the Data"""

movies = movies.merge(credits)

movies.head(1)

movies.shape

#genres
#title
#movie_id
#keywords
#overview
#cast
#crew

movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]
movies.head(1)

"""# Cleaning the data"""

movies.shape

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.isnull().sum()

movies['overview'][0]

"""# Import ast module for data cleaning -

## ast.literal_eval() - Used to convert datatypes
"""

import ast

def convert(obj):
    L = []
    for i in ast.literal_eval(obj):
        L.append(i['name'])
        
    return L

movies['genres'] = movies['genres'].apply(convert)

movies.head(1)

movies['keywords'] = movies['keywords'].apply(convert)

movies['keywords'][0]

movies.head(1)

def convert3(obj):
    L = []
    counter=0
    for i in ast.literal_eval(obj):
        if counter!=3:
            L.append(i['name'])
            counter+=1
        else:
            break
    
    return L

movies['cast'] = movies['cast'].apply(convert3)

movies['cast'][0]

movies['crew'][0]

def fetch_director(obj):
    L = []
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
            L.append(i['name'])
        
    return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies['crew'][0]

movies.head(1)

"""## Convert string to list"""

movies['overview'][0]

movies['overview'] = movies['overview'].apply(lambda x: x.split())

movies['overview'][0]

movies.head(1)

"""## Replace Gap between dataset values

"""

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])

movies['genres'][0]

movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head(2)

"""## Create a new column 'tags'"""

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head(1)

new_df  = movies[['movie_id','title','tags']]

new_df.head()

"""## Again convert List to String"""

new_df['tags'] = new_df['tags'].apply(lambda x: " ".join(x))

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x: x.lower())

new_df['tags'][0]

new_df.head()

"""## import nltk from NLP for stemming"""

import nltk
from nltk.stem.porter import PorterStemmer

ps = PorterStemmer()

def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)

stem('in the 22nd century, a paraplegic marine is dispatched to the moon pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization. action adventure fantasy sciencefiction cultureclash future spacewar spacecolony society spacetravel futuristic romance space alien tribe alienplanet cgi marine soldier battle loveaffair antiwar powerrelations mindandsoul 3d samworthington zoesaldana sigourneyweaver jamescameron')

new_df['tags'] = new_df['tags'].apply(stem)

"""## Start with ML Algorithm"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')
vectors = cv.fit_transform(new_df['tags']).toarray()
vectors

cv.get_feature_names()

"""## Find Cosine Distances for every movie"""

from sklearn.metrics.pairwise import cosine_similarity
cosine_similarity(vectors)

similarity = cosine_similarity(vectors)
similarity.shape

"""## Sorting in Decending Order

"""

sorted(similarity[0],reverse=True)

"""# Let's get result now"""

sorted(list(enumerate(similarity[0])),reverse=True, key=lambda x: x[1])[1:6]

"""## Function to return the actual recommender movie name

* For getting movie title instead of movie index
"""

def recommend(movie):
    movie_index = new_df[new_df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)),reverse=True, key=lambda x: x[1])[1:6]
    
    for i in movies_list:
        print(new_df.iloc[i[0]].title)

"""# Final Output

"""

recommend('Avatar')

recommend('Batman')

recommend('Iron Man')

recommend('Superman')

new_df.iloc[1216]

new_df.iloc[1216].title

